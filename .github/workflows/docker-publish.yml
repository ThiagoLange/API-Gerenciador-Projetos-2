# Nome do seu workflow
name: CI-CD Docker Publish

# Define o gatilho (trigger)
# Este workflow vai rodar sempre que houver um 'push' na branch 'main'
on:
  push:
    branches: [ "main" ]

# Define os jobs (tarefas) que o workflow executará
jobs:
  build-and-push:
    # O tipo de máquina que o job rodará
    runs-on: ubuntu-latest

    # Passos (steps) a serem executados
    steps:
      # 1. Faz o checkout do seu código-fonte
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o QEMU (para build multi-plataforma, boa prática)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Configura o Docker Buildx (construtor de imagens)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Faz o login no Docker Hub
      #    Ele usa os 'secrets' que você vai configurar no GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Extrai metadados (como tags e labels) para a imagem
      #    Isto vai automaticamente taggear sua imagem como 'seu-usuario/gerenciador-projetos:latest'
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # O nome da imagem no Docker Hub.
          # Use seu usuário do Docker Hub e o nome do artefato do pom.xml
          images: ${{ secrets.DOCKERHUB_USERNAME }}/gerenciador-projetos

      # 6. Constrói a imagem Docker (usando seu Dockerfile) e envia (push) para o Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # Usa as tags geradas no passo anterior (ex: 'latest')
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}